function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 06-Feb-2022 18:59:57.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [40;0;0;31;0];
x1_step1.gain = [0.0222222222222222;0.0202020202020202;0.0166666666666667;0.0289855072463768;0.0666666666666667];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.3949584045912752917;-2.7852730275674044691;0.52503320127110608695;-0.47610789664452302095;-0.32067176923127183041;-0.35290633269481908041;2.4491441340019024508;0.22917258030329315521;-0.72456887164868044593;-1.3505317662680269564];
IW1_1 = [1.0495832366697381843 1.9659713844796258275 0.98762920105632479029 -0.27385495274240029273 -0.63592910543590908112;0.0926325114976583458 0.84814062501478160172 0.090035541558757370417 -1.0204045749367394169 0.17961672780033433039;-1.0185639669978550081 0.3785562072507442366 -1.5650510686255263426 -1.4059978296741977299 -0.1556853373293151932;-0.063907404391412875322 -2.3891358631880161845 -1.590854690929937032 -2.9829966883234741992 0.046205833112435396037;-1.8898767248547545528 2.2696529336111055386 -1.7519702401686092497 -1.9434996166685403196 0.91016443694260318331;0.17334246587809765128 0.23395710979102887772 -0.48297809157234994348 -0.24028190553742412305 1.0578797094984411231;0.43747383490742552947 0.36909878513547272894 -0.60727631269688742144 1.3973519701829928419 -1.1568393813015807048;0.7069064437330687678 -1.5137040085324093841 -1.4779703658934868482 1.2071089448554548351 -1.9372202683176897864;-0.33376361136231658122 0.65302833558676010028 1.6702683566489142653 -1.8223485892281992005 0.13849100174065565039;-0.23240293200886233405 -2.5418737088152263404 -1.7419041353195567901 0.76680857772226895808 -0.81381815472407437184];

% Layer 2
b2 = 0.45284597568072043616;
LW2_1 = [0.34507083825436163371 0.68853628334994587679 0.15624297004328807636 -0.27656948940495357236 -0.51613238438953679132 -0.15498138699776142779 -0.091213343608637087456 0.22680982922143771985 -0.49078547644269143735 -0.17853200340653077594];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1;
y1_step1.xoffset = -1;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
